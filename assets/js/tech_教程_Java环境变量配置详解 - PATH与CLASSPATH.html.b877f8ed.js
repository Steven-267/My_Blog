"use strict";(self.webpackChunkblog_road=self.webpackChunkblog_road||[]).push([[1318],{6262:(a,s)=>{s.A=(a,s)=>{const i=a.__vccOpts||a;for(const[a,e]of s)i[a]=e;return i}},8159:(a,s,i)=>{i.r(s),i.d(s,{comp:()=>t,data:()=>h});var e=i(641);const l=[(0,e.Fv)('<h1 id="java配置环境变量-关于path和classpath" tabindex="-1"><a class="header-anchor" href="#java配置环境变量-关于path和classpath"><span>Java配置环境变量 | 关于PATH和CLASSPATH</span></a></h1><p>在Java中，<code>PATH</code> 和 <code>CLASSPATH</code> 是两个不同的环境变量，它们用于配置 Java 运行时和编译时的类路径和可执行程序路径。</p><h2 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>PATH</span></a></h2><p><code>PATH</code> 环境变量是用来指定我们操作系统在查找可执行程序时候应该搜索的目录，当你使用命令行在任意路径下Java程序**（javac、java、jar等命令）**或者其他可执行的文件时候，操作系统会在PATH中列出的目录中查找可执行文件。</p><h3 id="path的主要作用" tabindex="-1"><a class="header-anchor" href="#path的主要作用"><span>PATH的主要作用</span></a></h3><ol><li><strong>系统级别配置</strong>：让系统能够在任何位置找到Java相关命令</li><li><strong>全局访问</strong>：无需输入完整路径即可执行Java工具</li><li><strong>开发便利性</strong>：提供便捷的命令行开发体验</li></ol><h3 id="常见的java可执行文件" tabindex="-1"><a class="header-anchor" href="#常见的java可执行文件"><span>常见的Java可执行文件</span></a></h3><ul><li><code>java</code> - Java虚拟机</li><li><code>javac</code> - Java编译器</li><li><code>jar</code> - JAR文件管理工具</li><li><code>javap</code> - 类文件反汇编工具</li><li><code>jdb</code> - Java调试器</li></ul><h2 id="classpath" tabindex="-1"><a class="header-anchor" href="#classpath"><span>CLASSPATH</span></a></h2><p>如果你学过JavaWeb中的Maven，那你其实可以更能理解CLASSPATH的作用。</p><p><code>CLASSPATH</code> 环境变量用于指定Java编译器和Java运行时应该搜索类文件的位置，它通常包含目录路径和 JAR 文件路径。如果你的 Java 程序依赖于外部类库或自定义类，你需要将这些类的路径添加到 <code>CLASSPATH</code> 中。</p><p>使用 <code>CLASSPATH</code> 环境变量是一种旧的方式来配置类路径。在现代 Java 开发中，通常使用 Java 项目构建工具，如<strong>Apache Maven</strong> 或 Gradle，来管理依赖关系和构建过程，而不是直接设置 <code>CLASSPATH</code>。这些工具会自动处理类路径的配置，使其更加方便和可维护。</p><h2 id="classpath和maven的区别" tabindex="-1"><a class="header-anchor" href="#classpath和maven的区别"><span>CLASSPATH和Maven的区别</span></a></h2><h3 id="_1-maven构建工具" tabindex="-1"><a class="header-anchor" href="#_1-maven构建工具"><span>1. Maven构建工具</span></a></h3><ul><li><p><strong>构建工具</strong>: Maven 是一种构建工具，它不仅用于管理类路径依赖，还用于构建、测试、打包和发布 Java 项目。它提供了一种标准的项目结构和生命周期，使得构建和依赖管理更加方便和自动化。</p></li><li><p><strong>依赖管理</strong>: Maven 使用中央仓库以及用户自定义仓库来管理项目的依赖。你只需要在项目的 <code>pom.xml</code> 文件中列出项目所需的依赖，Maven 将自动下载并管理这些依赖。这种方式更加规范和可维护，因为你不需要手动管理类路径。</p></li><li><p><strong>版本控制</strong>: Maven 允许你指定依赖的版本，并可以自动解决依赖关系。这意味着你可以确保项目中使用的依赖始终是与项目兼容的版本。</p></li><li><p><strong>插件生态系统</strong>: Maven 具有丰富的插件生态系统，可以用于各种构建和部署任务。这些插件使得项目构建过程高度可定制。</p></li><li><p><strong>生命周期管理</strong>: Maven 定义了标准的构建生命周期，包括编译、测试、打包、部署等阶段，使得构建过程更加结构化。</p></li></ul><h3 id="_2-classpath传统方式" tabindex="-1"><a class="header-anchor" href="#_2-classpath传统方式"><span>2. CLASSPATH传统方式</span></a></h3><ul><li><p><strong>手动配置</strong>: CLASSPATH 是一个环境变量，用于手动配置 Java 类路径。你需要手动列出所有项目所需的 JAR 文件和类路径目录，这往往需要更多的人工维护。</p></li><li><p><strong>缺少依赖解析</strong>: CLASSPATH 不提供依赖解析功能。如果你的项目依赖于其他库，你需要手动下载并添加这些库到类路径中。这可能会导致版本冲突和维护问题。</p></li><li><p><strong>不具备构建功能</strong>: CLASSPATH 不是一个构建工具，它仅用于指定运行 Java 程序时应包含哪些类。因此，它不提供编译、测试、打包和部署等构建任务。</p></li></ul><h3 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比"><span>总结对比</span></a></h3><p>总的来说，Maven 是一种更加<strong>现代和自动化</strong>的方式来管理 Java 项目的依赖和构建过程，而 CLASSPATH 是一种更加<strong>传统和手动</strong>的方式。使用 Maven 或类似的构建工具通常被认为更为推荐，因为它们提供了更好的依赖管理、版本控制和构建自动化，减轻了开发人员的维护工作。</p><h2 id="那么是不是不需要配置classpath环境变量了呢" tabindex="-1"><a class="header-anchor" href="#那么是不是不需要配置classpath环境变量了呢"><span>那么是不是不需要配置CLASSPATH环境变量了呢？</span></a></h2><p>在<strong>不配置 Maven 环境</strong>的情况下，默认的 CLASSPATH 通常包括以下内容：</p><h3 id="默认classpath包含的内容" tabindex="-1"><a class="header-anchor" href="#默认classpath包含的内容"><span>默认CLASSPATH包含的内容</span></a></h3><ol><li><p><strong>当前目录</strong>：默认 CLASSPATH 包括当前工作目录中的类文件（.class 文件），这意味着你可以在当前目录中运行 Java 类，无需指定额外的路径。</p></li><li><p><strong>Java 标准库类</strong>：Java 标准库的类也会被包括在默认 CLASSPATH 中。这些类包括 Java 核心类库，如 <strong><code>java.lang</code>、<code>java.util</code>、<code>java.io</code></strong> 等。这些类提供了 Java 基础功能，如字符串处理、集合框架、输入输出等。</p></li><li><p><strong>Java 扩展库类</strong>：Java 还提供了一些扩展库，它们不属于标准库，但也可能被包括在默认 CLASSPATH 中。这些库通常是一些辅助库，用于特定的功能，如 RMI（远程方法调用）或 Java 2D 图形库。</p></li><li><p><strong>用户自定义类</strong>：如果你编写了自己的 Java 类并将其放在当前目录或其他类路径可访问的目录中，那么这些类也会被包括在默认 CLASSPATH 中。</p></li></ol><h3 id="现代开发建议" tabindex="-1"><a class="header-anchor" href="#现代开发建议"><span>现代开发建议</span></a></h3><p>请注意，这只是默认的 CLASSPATH 配置，如果你使用 Maven 或其他构建工具，它们通常会更灵活地管理依赖，并提供了更强大的类路径管理机制。在实际开发中，推荐使用构建工具来管理项目的依赖，而不是依赖于默认的 CLASSPATH 配置。这样可以更好地管理和协作大型项目的依赖关系。</p><h2 id="path和classpath的区别" tabindex="-1"><a class="header-anchor" href="#path和classpath的区别"><span>PATH和CLASSPATH的区别</span></a></h2><p><code>PATH</code> 和 <code>CLASSPATH</code> 在底层都可以被表示为集合（例如 <strong>Set</strong>），但它们在使用和功能上仍然有显著的差异。以下是它们在底层使用集合的一些共同点和不同点：</p><h3 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点"><span>共同点</span></a></h3><ol><li><p><strong>元素唯一性</strong>: 无论是 <code>PATH</code> 还是 <code>CLASSPATH</code>，它们都需要确保其中的路径不重复，因此可以使用集合来维护唯一性。</p></li><li><p><strong>添加和删除元素</strong>: 对于 <code>PATH</code> 和 <code>CLASSPATH</code>，你都可以向其中添加新路径，也可以从中删除路径。这与集合的添加和删除操作相对应。</p></li></ol><h3 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h3><ol><li><p><strong>数据类型不同</strong>: <code>PATH</code> 和 <code>CLASSPATH</code> 在<strong>底层</strong>可以使用不同类型的集合，因为它们具有不同的目的。<code>PATH</code> 更适合使用字符串集合，因为它用于管理文件系统中的路径字符串。<code>CLASSPATH</code> 更适合使用字符串集合，因为它涉及类路径和 JAR 文件路径的字符串。</p></li><li><p><strong>设置方式不同</strong>: <code>PATH</code> 是一个操作系统级别的环境变量，通常由操作系统自身管理，而不是由应用程序直接维护。因此，底层的数据结构和设置方式通常是操作系统特定的。<code>CLASSPATH</code> 则通常由 Java 虚拟机或 Java 应用程序自行维护，可以通过 Java 的类加载器来实现。虽然底层可能使用集合来存储路径，但用户通常通过配置文件或命令行参数来设置 <code>CLASSPATH</code>，而不是直接访问集合。</p></li></ol><h3 id="核心差异总结" tabindex="-1"><a class="header-anchor" href="#核心差异总结"><span>核心差异总结</span></a></h3><p>总之，尽管 <code>PATH</code> 和 <code>CLASSPATH</code> 可以在底层使用集合来维护其元素，但它们在使用、设置方式和数据类型上仍然有很大差异，因为它们用于不同的目的和层次。<code>PATH</code> 是<strong>操作系统级别</strong>的，而 <code>CLASSPATH</code> 是<strong>Java 应用程序级别</strong>的。</p><h2 id="实践指南" tabindex="-1"><a class="header-anchor" href="#实践指南"><span>实践指南</span></a></h2><h3 id="path配置示例" tabindex="-1"><a class="header-anchor" href="#path配置示例"><span>PATH配置示例</span></a></h3><p><strong>Windows系统：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 添加Java安装目录到PATH</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PATH=%PATH%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\Program</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Files</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\J</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ava</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">dk-11</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">in</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Linux/macOS系统：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 添加Java安装目录到PATH</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jvm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">java-11-openjdk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classpath配置示例" tabindex="-1"><a class="header-anchor" href="#classpath配置示例"><span>CLASSPATH配置示例</span></a></h3><p><strong>手动配置CLASSPATH（不推荐）：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Windows</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CLASSPATH=.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\myproject\\lib\\*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C:\\myproject\\classes</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># Linux/macOS  </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CLASSPATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.:~/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">myproject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/*:~/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">myproject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">classes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Maven项目配置（推荐）：</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.commons&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;commons-lang3&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;3.12.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践建议" tabindex="-1"><a class="header-anchor" href="#最佳实践建议"><span>最佳实践建议</span></a></h3><ol><li><p><strong>PATH配置</strong>：</p><ul><li>正确配置Java安装路径</li><li>验证配置：<code>java -version</code> 和 <code>javac -version</code></li><li>避免路径冲突和重复</li></ul></li><li><p><strong>依赖管理</strong>：</p><ul><li>优先使用Maven/Gradle等构建工具</li><li>避免手动配置CLASSPATH环境变量</li><li>使用项目级别的依赖管理</li></ul></li><li><p><strong>开发环境</strong>：</p><ul><li>IDE通常会自动处理类路径配置</li><li>项目构建工具负责依赖解析</li><li>关注项目结构标准化</li></ul></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="关键要点" tabindex="-1"><a class="header-anchor" href="#关键要点"><span>关键要点</span></a></h3><ol><li><strong>PATH</strong>：系统级别的可执行文件搜索路径，确保Java命令全局可用</li><li><strong>CLASSPATH</strong>：Java程序的类搜索路径，现代开发中建议使用构建工具管理</li><li><strong>Maven vs CLASSPATH</strong>：自动化 vs 手动，现代 vs 传统</li><li><strong>最佳实践</strong>：配置PATH + 使用Maven/Gradle管理依赖</li></ol><h3 id="现代java开发建议" tabindex="-1"><a class="header-anchor" href="#现代java开发建议"><span>现代Java开发建议</span></a></h3><ul><li>✅ <strong>配置PATH</strong>：确保Java工具全局可用</li><li>✅ <strong>使用Maven/Gradle</strong>：现代化的依赖和构建管理</li><li>❌ <strong>避免手动CLASSPATH</strong>：减少维护负担和错误风险</li><li>✅ <strong>标准化项目结构</strong>：提高团队协作效率</li></ul><p>正确理解和配置Java环境变量是每个Java开发者的基础技能，掌握现代构建工具的使用更是提高开发效率的关键！</p>',52)],n={},t=(0,i(6262).A)(n,[["render",function(a,s){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/tech/%E6%95%99%E7%A8%8B/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%20-%20PATH%E4%B8%8ECLASSPATH.html","title":"Java环境变量配置详解 - PATH与CLASSPATH","lang":"zh-CN","frontmatter":{"title":"Java环境变量配置详解 - PATH与CLASSPATH","date":"2023-10-29T00:00:00.000Z","category":["技术教程"],"tag":["Java","环境配置","Java基础","开发环境","Maven"],"author":"Steven267","isOriginal":true,"description":"Java配置环境变量 | 关于PATH和CLASSPATH 在Java中，PATH 和 CLASSPATH 是两个不同的环境变量，它们用于配置 Java 运行时和编译时的类路径和可执行程序路径。 PATH PATH 环境变量是用来指定我们操作系统在查找可执行程序时候应该搜索的目录，当你使用命令行在任意路径下Java程序**（javac、java、jar...","head":[["meta",{"property":"og:url","content":"https://steven-267.github.io/My_Blog/tech/%E6%95%99%E7%A8%8B/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%20-%20PATH%E4%B8%8ECLASSPATH.html"}],["meta",{"property":"og:site_name","content":"Steven267的技术博客"}],["meta",{"property":"og:title","content":"Java环境变量配置详解 - PATH与CLASSPATH"}],["meta",{"property":"og:description","content":"Java配置环境变量 | 关于PATH和CLASSPATH 在Java中，PATH 和 CLASSPATH 是两个不同的环境变量，它们用于配置 Java 运行时和编译时的类路径和可执行程序路径。 PATH PATH 环境变量是用来指定我们操作系统在查找可执行程序时候应该搜索的目录，当你使用命令行在任意路径下Java程序**（javac、java、jar..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-23T12:10:10.000Z"}],["meta",{"property":"article:author","content":"Steven267"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"环境配置"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:tag","content":"开发环境"}],["meta",{"property":"article:tag","content":"Maven"}],["meta",{"property":"article:published_time","content":"2023-10-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-23T12:10:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java环境变量配置详解 - PATH与CLASSPATH\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-23T12:10:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Steven267\\"}]}"]]},"headers":[{"level":2,"title":"PATH","slug":"path","link":"#path","children":[{"level":3,"title":"PATH的主要作用","slug":"path的主要作用","link":"#path的主要作用","children":[]},{"level":3,"title":"常见的Java可执行文件","slug":"常见的java可执行文件","link":"#常见的java可执行文件","children":[]}]},{"level":2,"title":"CLASSPATH","slug":"classpath","link":"#classpath","children":[]},{"level":2,"title":"CLASSPATH和Maven的区别","slug":"classpath和maven的区别","link":"#classpath和maven的区别","children":[{"level":3,"title":"1. Maven构建工具","slug":"_1-maven构建工具","link":"#_1-maven构建工具","children":[]},{"level":3,"title":"2. CLASSPATH传统方式","slug":"_2-classpath传统方式","link":"#_2-classpath传统方式","children":[]},{"level":3,"title":"总结对比","slug":"总结对比","link":"#总结对比","children":[]}]},{"level":2,"title":"那么是不是不需要配置CLASSPATH环境变量了呢？","slug":"那么是不是不需要配置classpath环境变量了呢","link":"#那么是不是不需要配置classpath环境变量了呢","children":[{"level":3,"title":"默认CLASSPATH包含的内容","slug":"默认classpath包含的内容","link":"#默认classpath包含的内容","children":[]},{"level":3,"title":"现代开发建议","slug":"现代开发建议","link":"#现代开发建议","children":[]}]},{"level":2,"title":"PATH和CLASSPATH的区别","slug":"path和classpath的区别","link":"#path和classpath的区别","children":[{"level":3,"title":"共同点","slug":"共同点","link":"#共同点","children":[]},{"level":3,"title":"不同点","slug":"不同点","link":"#不同点","children":[]},{"level":3,"title":"核心差异总结","slug":"核心差异总结","link":"#核心差异总结","children":[]}]},{"level":2,"title":"实践指南","slug":"实践指南","link":"#实践指南","children":[{"level":3,"title":"PATH配置示例","slug":"path配置示例","link":"#path配置示例","children":[]},{"level":3,"title":"CLASSPATH配置示例","slug":"classpath配置示例","link":"#classpath配置示例","children":[]},{"level":3,"title":"最佳实践建议","slug":"最佳实践建议","link":"#最佳实践建议","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"关键要点","slug":"关键要点","link":"#关键要点","children":[]},{"level":3,"title":"现代Java开发建议","slug":"现代java开发建议","link":"#现代java开发建议","children":[]}]}],"git":{"createdTime":1753272610000,"updatedTime":1753272610000},"readingTime":{"minutes":7.94,"words":2381},"filePathRelative":"tech/教程/Java环境变量配置详解 - PATH与CLASSPATH.md","localizedDate":"2023年10月29日","excerpt":"\\n<p>在Java中，<code>PATH</code> 和 <code>CLASSPATH</code> 是两个不同的环境变量，它们用于配置 Java 运行时和编译时的类路径和可执行程序路径。</p>\\n<h2>PATH</h2>\\n<p><code>PATH</code> 环境变量是用来指定我们操作系统在查找可执行程序时候应该搜索的目录，当你使用命令行在任意路径下Java程序**（javac、java、jar等命令）**或者其他可执行的文件时候，操作系统会在PATH中列出的目录中查找可执行文件。</p>\\n<h3>PATH的主要作用</h3>\\n<ol>\\n<li><strong>系统级别配置</strong>：让系统能够在任何位置找到Java相关命令</li>\\n<li><strong>全局访问</strong>：无需输入完整路径即可执行Java工具</li>\\n<li><strong>开发便利性</strong>：提供便捷的命令行开发体验</li>\\n</ol>","autoDesc":true}')}}]);